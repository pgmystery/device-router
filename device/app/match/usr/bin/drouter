#!/usr/bin/python

import os
import sys
import locale
import subprocess
import time


pidfile_path = "/var/run/match.pid"
servicefile_path = "/etc/init.d/match.sh"

encoding = locale.getpreferredencoding()
commands = {}
aliases = {}


def run_match_command(cmd=u"", check_service=False):
	if os.access(servicefile_path, os.X_OK):
		p = subprocess.Popen([servicefile_path, cmd], preexec_fn=os.setsid, cwd=os.path.expanduser("~"), stderr=sys.stderr)
		if check_service:
			interval = 0.5
			wait_for = 60
			for i in xrange(int(wait_for / interval)):
				if check_service == 1:
					if is_match_running():
						return True
				elif check_service == 2:
					if not is_match_running():
						return True
				time.sleep(interval)
			return False
		return True
	else:
		return False


def command(meth):
	global commands, aliases
	assert meth.__doc__, "All commands need properly formatted docstrings (even %r!!)" % meth
	if hasattr(meth, 'im_func'): # bound method, if we ever have one
		meth = meth.im_func
	commands[meth.func_name] = meth
	meth_aliases = [unicode(alias) for alias in aliases.iterkeys() if aliases[alias].func_name == meth.func_name]
	if meth_aliases:
		meth.__doc__ += u"\nAliases: %s" % ",".join(meth_aliases)
	return meth

def alias(name):
	def decorator(meth):
		global commands, aliases
		assert name not in commands, "This alias is the name of a command."
		aliases[name] = meth
		return meth
	return decorator


# commands:
@command
def help(args):
	u"""HELP"""
	return usage(args)

@command
@alias('run')
def start(args):
	u"""Starts the 'match'-service"""
	if is_match_running():
		return console_print(u"The \"match\"-service is already running!")
	if not run_match_command("start", 1):
		return console_print(u"Could not start the \"match\"-service!")
	console_print(u"\"match\"-service started!")

@command
def stop(args):
	u"""Stops the 'match'-service"""
	if not is_match_running():
		return console_print(u"The \"match\"-service is not running!")
	if not run_match_command("stop", 2):
		return console_print(u"Could not stop the \"match\"-service!")
	console_print(u"\"match\"-service stopped!")

@command
@alias('reload')
def restart(args):
	u"""Restart the 'match'-service"""
	if not is_match_running():
		return console_print(u"The \"match\"-service is not running!")
	if not run_match_command("restart", 1):
		return console_print(u"Could not restart the \"match\"-service!")
	console_print(u"\"match\"-service restarted!")

@command
def status(args):
	u"""Return the status of the 'match'-service"""
	if is_match_running():
		console_print(u"The \"match\"-service is running! (\033[1;32;40m ONLINE)")
	else:
		console_print(u"The \"match\-service is NOT running! (\033[1;31;40m OFFLINE)")

@command
def update(args):
	u"""Check for updates and update the 'match'-service if necessary"""
	if not is_match_running():
		return console_print(u"The \"match\"-service is not running!")
	if not run_match_command("update"):
		return console_print(u"Could not update the \"match\"-service!")
	# console_print(u"\"match\"-service stopped!")


def is_match_running():
	pidfile = os.path.expanduser(pidfile_path)
	try:
		with open(pidfile, "r") as f:
			pid = int(f.read())
		with open("/proc/%d/cmdline" % pid, "r") as f:
			cmdline = f.read().lower()
	except:
		cmdline = ""
	return "match" in cmdline

def console_print(st=u"", f=sys.stdout, linebreak=True):
	global encoding
	assert type(st) is unicode
	f.write(st.encode(encoding))
	if linebreak: f.write(os.linesep)

def console_flush(f=sys.stdout):
	f.flush()

def usage(argv):
	console_print(u"Lighter-Match command-line interface\n")
	if is_match_running():
		console_print(u"match status:\x1b[32;1m online\x1b[0m")
	else:
		console_print(u"match status:\x1b[31;1m offline\x1b[0m")
	console_print(u"aviable commands:\n")
	out = []
	for command in commands:
		out.append((command, commands[command].__doc__.splitlines()[0]))
	spacing = max(len(o[0])+3 for o in out)
	for o in out:
		console_print(" %-*s%s" % (spacing, o[0], o[1]))
	console_print()

def main(argv):
	global commands

	cut = None
	for i in range(len(argv)):
		if argv[i] in commands or argv[i] in aliases:
			cut = i
			break
	if cut == None:
		usage(argv)
		os._exit(0)
		return

	result = None
	if argv[i] in commands:
		result = commands[argv[i]](argv[i+1:])
	elif argv[i] in aliases:
		result = aliases[argv[i]](argv[i+1:])
	console_flush()
	return result

if __name__ == "__main__":
	ret = main(sys.argv)
	if ret is not None:
		sys.exit(ret)
